     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ;A string containing n binary representations on 8 bits is given as a character string.
     4                                  ;Obtain the string containing the numbers corresponding to the given binary representations.
     5                                  ;Example:
     6                                  ;Given: '10100111b', '01100011b', '110b', '101011b'
     7                                  ;Obtain: 10100111b, 01100011b, 110b, 101011b
     8                                  
     9                                  
    10                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
    11                                  global start        
    12                                  
    13                                  ; declare external functions needed by our program
    14                                  extern exit,fopen,fprintf,fclose              ; tell nasm that exit exists even if we won't be defining it
    15                                  import exit msvcrt.dll
    16                                  import fprintf msvcrt.dll
    17                                  import fopen msvcrt.dll
    18                                  import fclose msvcrt.dll 
    19                                  %include  "stringtobinary.asm"  
     1                              <1> 
     2                              <1> %ifndef  _STRINGTOBINARY_ASM_ ; continuam daca _FACTORIAL_ASM_ este nedefinit
     3                              <1> %define  _STRINGTOBINARY_ASM_ ; si ne asiguram ca devine definit
     4                              <1> 
     5                              <1> stringtobinary:
     6                              <1>         ; ...
     7 00000000 8B4C2404            <1>         mov ecx, [esp+4]
     8 00000004 83E930              <1>         sub ecx, '0'
     9 00000007 C20400              <1>         ret 4
    10                              <1> %endif
    11                              <1> 
    12                              <1>   ;nasm -fobj mainstringtobinary.asm
    13                              <1>   ;nasm -fobj stringtobinary.asm
    14                              <1>   ;alink mainstringtobinary.obj stringtobinary.obj -oPE -subsys console -entry start
    15                              <1>   ;mainfact.exe   
    20                                                         
    21                                  
    22                                  ; our data is declared here (the variables needed by our program)
    23                                  segment data use32 class=data
    24                                      ; ...
    25 0000000A 313031303031313162-         sir db '10100111b', '01111111b', '110b', '101011b'
    25 00000013 303131313131313162-
    25 0000001C 313130623130313031-
    25 00000025 3162               
    26                                      lensir equ $-sir
    27 00000027 7700                        access_mode db "w", 0
    28 00000029 61666973637576616E-         file_name db "afiscuvant.txt", 0
    28 00000032 742E74787400       
    29 00000038 00000000                    fdesc dd 0
    30 0000003C 256400                      decimal_format db "%d", 0
    31 0000003F 256300                      char_format db "%c", 0
    32 00000042 00000000                    caract dd 0
    33 00000046 00                          digit db 0
    34                                  ; our code starts here
    35                                  segment code use32 class=code
    36                                      start:
    37                                          ; deschid fisierul pt afisare
    38 00000000 68[27000000]                    push dword access_mode
    39 00000005 68[29000000]                    push dword file_name
    40 0000000A FF15[00000000]                  call [fopen]
    41 00000010 83C408                          add esp, 4*2
    42 00000013 A3[38000000]                    mov [fdesc], eax
    43 00000018 83F800                          cmp eax, 0
    44 0000001B 0F8485000000                    je the_end
    45                                          
    46                                          ; parcurg fiecare cuvant pana la 0 si dupa cu esi pentru fiecare cuvant vad pentru fiecare caracter daca e 1 sau 0 sau b si il schimb in numar
    47 00000021 BE00000000                      mov esi, 0
    48 00000026 B900000000                      mov ecx, 0
    49 0000002B BB00000000                      mov ebx, 0
    50 00000030 BB1D000000                      mov ebx, lensir
    51                                          repeat1:
    52 00000035 B900000000                              mov ecx, 0
    53 0000003A 8A8E[0A000000]                          mov cl, [sir+esi]
    54 00000040 46                                      inc esi
    55 00000041 880D[46000000]                          mov [digit], cl
    56 00000047 51                                      push ecx
    57 00000048 E8(00000000)                            call stringtobinary
    58 0000004D 80F932                                  cmp cl, 32h
    59 00000050 890D[42000000]                          mov dword [caract], ecx
    60 00000056 7422                                    je next_word
    61 00000058 FF35[42000000]                          push dword [caract]
    62 0000005E 68[3C000000]                            push decimal_format
    63 00000063 FF35[38000000]                          push dword [fdesc]
    64 00000069 FF15[00000000]                          call [fprintf]
    65 0000006F 83C40C                                  add esp, 4*3
    66 00000072 4B                              dec ebx
    67 00000073 83FB00                          cmp ebx, 0
    68 00000076 742E                            je the_end
    69 00000078 75BB                            jne repeat1
    70                                                  next_word:
    71 0000007A C705[42000000]2000-                     mov dword [caract], ' '
    71 00000082 0000               
    72 00000084 FF35[42000000]                          push dword [caract]
    73 0000008A 68[3F000000]                            push char_format
    74 0000008F FF35[38000000]                          push dword [fdesc]
    75 00000095 FF15[00000000]                          call [fprintf]
    76 0000009B 83C40C                                  add esp, 4*3
    77 0000009E 4B                              dec ebx
    78 0000009F 83FB00                          cmp ebx, 0
    79 000000A2 7402                            je the_end
    80 000000A4 758F                            jne repeat1    
    81                                                 
    82                                          
    83                                          the_end:
    84 000000A6 FF35[38000000]                  push dword[fdesc]
    85 000000AC FF15[00000000]                  call [fclose]
    86 000000B2 83C404                          add esp, 4*1
    87                                          ; exit(0)
    88 000000B5 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    89 000000B7 FF15[00000000]                  call    [exit]       ; call exit to terminate the program

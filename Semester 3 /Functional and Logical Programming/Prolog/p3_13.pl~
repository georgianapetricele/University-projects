%The list a1, ..., an is given and it consists of distinct integers.
% Write a predicate to determine all subsets
% with aspect of "mountain" (a set has a "mountain" aspect if the
% elements increase to a certain point
%and then decrease).
%
%
%mountain(l1..ln,f) = true, if n<=1 and f=1
%                 = mountain(l2..ln,0), l1<l2 and f=0
%                 = mountain(l2..ln,1), l1>l2 and (f1=0 or f1=1)
%                 = false, otherwise
%
%mountain(L:List,f:Number)
%
%flow model: mountain(i,i)

mountain([],1).
mountain([_],1).
mountain([H1,H2|T],0):- H1<H2,
    mountain([H2|T],0).
mountain([H1,H2|T],0):- H1>=H2, %the top when it changes its aspect
    mountain([H2|T],1).
mountain([H1,H2|T],1):- H1>H2, %the top when it changes its aspect
    mountain([H2|T],1).



%is_mountain(L:list)
%
%is_mountain(i)
%
is_mountain([H1,H2|T]):- H1<H2,
    mountain([H1,H2|T],0).


%subsets(l1..ln) = [], if n=0
%                = l1 + subsets(l2..ln), n>0
%                = subsets(l2..ln)
%
%subsets(L:List,Res:List)
%
%flow model: subsets(i,o)

subsets([],[]).
subsets([H|T],[H|Res]):-
    subsets(T,Res).
subsets([_|T],Res):-
    subsets(T,Res).

%onesol(L:List,Res:List)
%
%flow model: onesol(i,o)

onesol(L,Res):-
    subsets(L,Res),
    is_mountain(Res).

%allsol(L:List,R:List)
%allsol(i,o)
%
%
allsol(L,R):-
    findall(Res,onesol(L,Res),R).







